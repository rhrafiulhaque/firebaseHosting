1. Console.Firebase  ->  build  --> Hosting --> Get Started --> Next --> 

2. firebase Login ruuning in cmd

3. fitebase init  in cmd
	-y
	(*) Hosing: COnfigure files for firebase Hosting and Optionally set up Github action deploys (Space Bar Press)
	> Use an Existing Project
	> Select the Project
	> What do you want to use as your public directory?	> build 
	>Configure as a single page application?	yes
	> Set Up Automatic deploys with Github? No

	


4. Now we have run in cmd   > npm run build 
5. cmd > firebase deploy



if once deploye the server then just only two commands have to change
>npm run build
>firebase deploy









Server Side Deploy (Vercel)
----------------------------
In server side folder Cmd

1> npm i -g vercel
> vercel       (in cmd then we have to permission to login)
 > then want to scope and they suggest them you should press enter
> Link to Existing Project? No
>What is your project Name? 		(kinbaanaki-backend)
>In which directroy is your code located? ./
> Want to modify these settings? N


2. in pachkage.json file there have an command after "start file" ---- "build":"node index.js"



3. in create vercel.json file and paste the following codes.....

vercel.json 
----------

{
    "version": 2,
    "builds": [
        {
            "src": "./index.js",
            "use": "@vercel/node"
        }
    ],
    "routes": [
        {
            "src": "/(.*)",
            "dest": "/"
        }
    ]
}


4. Then vercel.com in dashboard existing project we have to add Enviroment Variabales 


  
 if the get /products will not work it will be in backend "client.connect()"  before the await is removed
 




TypeScript
-------------------------------
Vercel এ ডেপ্লয় এর ক্ষেত্রে কয়েকটি জিনিস খেয়াল রাখতে হবে
১। tsconfig.json এর মধ্যে
"module": "commonjs" */* Specify what module code is generated. */*,
"rootDir": "./src" */* Specify the root folder within your source files. */*,
"outDir": "./dist" */* Specify an output folder for all emitted files. */*,
এই কনফিগটি add করে নিতে হবে যদি আগে থেকে করা না থাকে
২। package.json এর মধ্যে
"scripts": {
"dev": "ts-node-dev --respawn --transpile-only src/server.ts",
"start": "node dist/server.js",
"build": "tsc"
}
৩। প্রজেক্টের রুট এর মধ্যে vercel.json ফাইল বানিইয়ে নিতে হবে
{

  "version": 2,
  "builds": [
   {
     "src": "dist/server.js",
     "use": "@vercel/node"
   }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "dist/server.js"
    }
  ]
}
এরপর Cli দিয়ে deploy করে নিলেই কাজ শেষ , সার্ভার রেডি

tsc
vercel --prod
এই দুইটা কমান্ড দেন।
vercel.json থেকে server path ta dist/yourServerFileName.js করবেন।



Mongoose এর ক্ষেত্রে নিচের 
vercel.json কপি পেষ্ট করতে হবে---
----------------------------------
{
    "version": 2,
    "builds": [
        {
            "src": "src/server.js",
            "use": "@vercel/node"
        }
    ],
    "routes": [
        {
            "src": "/(.*)",
            "dest": "src/server.js"
        }
    ]
}




Fixing  Firebase Deploy

--- firebase logout
--- firebase login



and firebase install in powershell


----------------------------------------------------------------------------------------
If i have another git but i want to push old git repository so that is following
git remote -v
git remote set-url origin (repository Link) 


If I have my project from my two computer then how i clone and changes to commit the steps are below-
Step 1: Clone the Repository
bash
Copy code
# Clone the repository to your local machine
git clone https://github.com/rhrafiulhaque/pantavatpro-backend.git

# Change into the repository directory
cd pantavatpro-backend
Step 2: Make Changes
Make the necessary changes to the code or files in your local repository using your preferred code editor.

Step 3: Add and Commit Changes
bash
Copy code
# Stage the changes
git add .

# Commit the changes with a meaningful commit message
git commit -m "Update something in the project"
Step 4: Fetch Remote Changes
Before pushing your changes, it's a good practice to fetch and merge any changes from the remote repository to avoid conflicts.

bash
Copy code
# Fetch changes from the remote repository
git fetch origin

# Merge the changes into your local branch
git merge origin/main
Step 5: Resolve Conflicts (if any)
If there are any merge conflicts, Git will notify you. Resolve conflicts in your code and then continue the merge:

bash
Copy code
# Resolve conflicts and stage the changes
git add .

# Continue the merge process
git merge --continue
Step 6: Push Changes to the Remote Repository
bash
Copy code
# Push your changes to the remote repository
git push origin main
Now, your changes should be reflected in the remote repository. If there were conflicts, make sure they are resolved appropriately before pushing.

This sequence of commands covers the basic workflow of cloning, making changes, and pushing them back to a remote repository. Adjust the branch names as needed based on the structure of the repository.


